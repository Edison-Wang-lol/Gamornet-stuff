import pylab as plt
import numpy as np
from astropy.io import fits
from gamornet.keras_module import gamornet_predict_keras
from os import listdir

### Getting labels for all images (print functions are used to check the labels)
gal_para = plt.genfromtxt("/Users/apple/Desktop/GaMorNet/yu.txt",
                          names="sersic_idx,R_e,axis_ratio,PA,Inte_Mag,x_pos,y_pos,"
                                "sersic_idx_2,R_e_2,axis_ratio_2,PA_2,Inte_Mag_2,x_pos_2,y_pos_2,sky_back",usecols=(4,11),encoding="ISO-8859-1")
print (gal_para)
disk_bulge_mag = gal_para["Inte_Mag"] - gal_para["Inte_Mag_2"]
print (disk_bulge_mag)

def label_handler(i):
    target_vect = [0] * 3
    if (disk_bulge_mag[i] < -0.22):
        target_vect[0] = 1
    elif (-0.22 <= disk_bulge_mag[i] <= 0.22):
        target_vect[1] = 1
    else:
        target_vect[2] = 1
    return target_vect

testing_labels = list(map(label_handler,range(0,10000))) ### Putting the labels (small lists) into a large list
print (testing_labels)

### Getting first 10000 images
all_images = listdir("/Users/apple/Desktop/GaMorNet/Simulations/CANDELS_net/urry/ag2422/gal_sim_runs/gal_sim_images_11_extra_proc_2") ### Listing the paths to all images
del all_images[10000:] ### Deleting the ones after 10000
image_paths = ["/Users/apple/Desktop/GaMorNet/Simulations/CANDELS_net/urry/ag2422/gal_sim_runs/gal_sim_images_11_extra_proc_2/"+file for file in all_images] ### Completing the paths
data_lst = []
for path in image_paths:
    data = fits.getdata(path)
    transform = np.reshape(data,newshape=(83,83,1))
    data_lst.append(transform) ### Turning images into numpy arrays and putting them into a list
img_array = np.array(data_lst) ### Turning the list of ndarrays into an array

predictions = gamornet_predict_keras(img_array, model_load_path='CANDELS_sim', input_shape='CANDELS', batch_size=64) ### Performing predictions

predictions_lst1 = predictions.tolist() ### Putting the predictions into a list
predictions_lst2 = predictions_lst1 ### Duplicating the list
print (predictions_lst1)

### First Criteria: Highest Probability
for i in range(0,10000):
    pred = predictions_lst1[i]
    if pred[0] == max(pred):
        predictions_lst1[i] = [1, 0, 0]
    elif pred[1] == max(pred):
        predictions_lst1[i] = [0, 1, 0]
    elif pred[2] == max(pred):
        predictions_lst1[i] = [0, 0, 1] ### Turning probabilities into labels

predict_disk_num = predictions_lst1.count([1,0,0])
predict_bulge_num = predictions_lst1.count([0,0,1])
predict_indeter_num = predictions_lst1.count([0,1,0])
predict_exp_indeter = predict_disk_num + predict_bulge_num ### exp means except
total_correct_num = correct_exp_indeter = disk_num = bulge_num = indeter_num = Td_Fb = Tb_Fd = 0 ### Td_Fb means True disk but predicted bulge
Td_Fi = Tb_Fi = Ti_Fd = Ti_Fb = 0
for i in range(0,10000):
    if testing_labels[i] == predictions_lst1[i]:
        total_correct_num += 1
        if testing_labels[i] == [1,0,0]:
            disk_num += 1
            correct_exp_indeter += 1
        elif testing_labels[i] == [0,0,1]:
            bulge_num += 1
            correct_exp_indeter += 1
        else:
            indeter_num += 1
    else:
        if testing_labels[i] == [1,0,0] and predictions_lst1[i] == [0,0,1]:
            Td_Fb += 1
        elif testing_labels[i] == [0,0,1] and predictions_lst1[i] == [1,0,0]:
            Tb_Fd += 1
        elif testing_labels[i] == [0,1,0] and predictions_lst1[i] == [1,0,0]:
            Ti_Fd += 1
        elif testing_labels[i] == [0,1,0] and predictions_lst1[i] == [0,0,1]:
            Ti_Fb += 1
        elif testing_labels[i] == [1,0,0] and predictions_lst1[i] == [0,1,0]:
            Td_Fi += 1
        elif testing_labels[i] == [0,0,1] and predictions_lst1[i] == [0,1,0]:
            Tb_Fi += 1

total_accuracy = total_correct_num / 10000
accuracy_exp_indeter = correct_exp_indeter / predict_exp_indeter
predicted_to_be_indeter = Td_Fi + Tb_Fi

print (f"GaMorNet predictions with first criteria:\nDisk-dominated: {predict_disk_num}.\n"
       f"Bulge-dominated: {predict_bulge_num}.\nIndeterminate: {predict_indeter_num}.\n")
print (f"Accuracy including indeterminate: {total_accuracy}.\nAccuracy without indeterminate: {accuracy_exp_indeter}. "
       f"({correct_exp_indeter} in {predict_exp_indeter})\n")
print (f"True disk and predicted disk: {disk_num}.\nTrue bulge and predicted bulge: {bulge_num}.\n"
       f"True disk but predicted bulge: {Td_Fb}.\nTrue bulge but predicted disk: {Tb_Fd}.\n"
       f"True disk or bulge but predicted indeterminate: {predicted_to_be_indeter}.\n"
       f"True indeterminate and predicted indeterminate: {indeter_num}.\n")

### Second Criteria: Refer to Paper (CANDELS)
for i in range(0,10000):
    pred = predictions_lst2[i]
    if pred[2] >= 0.55:
        predictions_lst2[i] = [0,0,1]
    elif pred[0] >= 0.36 and pred[0] == max(pred):
        predictions_lst2[i] = [1,0,0]
    else:
        predictions_lst2[i] = [0,1,0]

predict_disk_num = predictions_lst2.count([1,0,0])
predict_bulge_num = predictions_lst2.count([0,0,1])
predict_indeter_num = predictions_lst2.count([0,1,0])
predict_exp_indeter = predict_disk_num + predict_bulge_num
total_correct_num = correct_exp_indeter = disk_num = bulge_num = indeter_num = Td_Fb = Tb_Fd = 0
Td_Fi = Tb_Fi = Ti_Fd = Ti_Fb = 0
for i in range(0,10000):
    if testing_labels[i] == predictions_lst2[i]:
        total_correct_num += 1
        if testing_labels[i] == [1,0,0]:
            disk_num += 1
            correct_exp_indeter += 1
        elif testing_labels[i] == [0,0,1]:
            bulge_num += 1
            correct_exp_indeter += 1
        else:
            indeter_num += 1
    else:
        if testing_labels[i] == [1,0,0] and predictions_lst2[i] == [0,0,1]:
            Td_Fb += 1
        elif testing_labels[i] == [0,0,1] and predictions_lst2[i] == [1,0,0]:
            Tb_Fd += 1
        elif testing_labels[i] == [0,1,0] and predictions_lst2[i] == [1,0,0]:
            Ti_Fd += 1
        elif testing_labels[i] == [0,1,0] and predictions_lst2[i] == [0,0,1]:
            Ti_Fb += 1
        elif testing_labels[i] == [1,0,0] and predictions_lst2[i] == [0,1,0]:
            Td_Fi += 1
        elif testing_labels[i] == [0,0,1] and predictions_lst1[i] == [0,1,0]:
            Tb_Fi += 1

total_accuracy = total_correct_num / 10000
accuracy_exp_indeter = correct_exp_indeter / predict_exp_indeter
predicted_to_be_indeter = Td_Fi + Tb_Fi

print (f"GaMorNet predictions with second criteria:\nDisk-dominated: {predict_disk_num}.\n"
       f"Bulge-dominated: {predict_bulge_num}.\nIndeterminate: {predict_indeter_num}.\n")
print (f"Accuracy including indeterminate: {total_accuracy}.\nAccuracy without indeterminate: {accuracy_exp_indeter}. "
       f"({correct_exp_indeter} in {predict_exp_indeter})\n")
print (f"True disk and predicted disk: {disk_num}.\nTrue bulge and predicted bulge: {bulge_num}.\n"
       f"True disk but predicted bulge: {Td_Fb}.\nTrue bulge but predicted disk: {Tb_Fd}.\n"
       f"True disk or bulge but predicted indeterminate: {predicted_to_be_indeter}.\n"
       f"True indeterminate and predicted indeterminate: {indeter_num}.\n")
